---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  MyVpcCIDR:
    Description: CIDR block for VPC defaults to 10.45.0.0
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}'
    ConstraintDescription: Must be an IP address in the form x.x.x.x
    Type: String
    Default: 10.45.0.0
  MyHostedDomain:
    Description: Name of hosted domain E.g. example.com
    Type: String
    Default: ''
  TechnicalContact:
    Description: Owner of the created resources used in the tagging
    Type: String
    Default: Darren Harris

Conditions:
  CreateDNS: !Not [ !Equals [ "", !Ref MyHostedDomain ]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [ '', [!Ref MyVpcCIDR, '/16']]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      - Key: TechnicalContact
        Value: !Ref TechnicalContact

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - IPv6CidrBlock
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [ !Join [ '', [!Ref MyVpcCIDR, '/16']], 16, 12]]
      Ipv6CidrBlock: !Select [ 1, !Cidr [ !Select [ 0, !GetAtt [ VPC, Ipv6CidrBlocks ]], 256, 64 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref AWS::StackName
              - '-subnet-public1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - IPv6CidrBlock
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [ !Join [ '', [!Ref MyVpcCIDR, '/16']], 16, 12]]
      Ipv6CidrBlock: !Select [ 2, !Cidr [ !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ]], 256, 64 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref AWS::StackName
              - '-subnet-public2'  
    
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Select [8, !Cidr [ !Join [ '', [!Ref MyVpcCIDR, '/16']], 16, 12]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref AWS::StackName
              - '-subnet-private1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Select [9, !Cidr [ !Join [ '', [!Ref MyVpcCIDR, '/16']], 16, 12]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref AWS::StackName
              - '-subnet-private2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-pub-tbl"

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-pvt-tbl"

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1

  EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ecs"
      GroupDescription: Allows traffic on port 8080 into the ECS container VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Join [ ":", [ !Ref "AWS::StackName", ECSSecurityGroup ] ]
      VpcId: !Ref VPC

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-alb"
      GroupDescription: Allows traffic from the Internet via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Join [ ":", [ !Ref "AWS::StackName", ALBSecurityGroup ] ]
      VpcId: !Ref VPC

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      Name: !Sub "${AWS::StackName}-alb"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-alb"
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: application/json
            MessageBody: '{ "error": "invalid request" }'
      LoadBalancerArn: !Ref ALB
      Protocol: HTTP
      Port: 80

  myDNS:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    DependsOn: ALB
    Properties:
      Type: A
      HostedZoneName: !Sub "${MyHostedDomain}."
      Name: !Sub "mystore.${MyHostedDomain}."
      AliasTarget:
          DNSName: !GetAtt 'ALB.DNSName'
          HostedZoneId: !GetAtt 'ALB.CanonicalHostedZoneID'

  MyServiceDiscovery:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties: 
      Description: Microservice discovery service
      Name: mystore
      Vpc: !Ref VPC

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: mystore-ecs-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
  
  SSMParameterDBFailure:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mystore/simulate-db-failure
      Type: String
      Value: 0
      Description: "Specifies the percentage that a DB failure is simulated in the backend services"
      Tags:
        TechnicalContact: !Ref TechnicalContact

  SSMParameterDBSlow:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mystore/simulate-db-performance
      Type: String
      Value: False
      Description: "Simulates a slow DB request in the backend services"
      Tags:
        TechnicalContact: !Ref TechnicalContact

  SSMParameterCWLogFmt:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /mystore/cw-agent-log-format
      Type: String
      Value: | 
        {
          "logs": 
            { "metrics_collected": 
              { "emf": {} }
            }, 
          "metrics":
            { "metrics_collected":
              { "statsd": {} }
            }
        }
      Description: "Simulates a DB failure in the backend services"
      Tags:
        TechnicalContact: !Ref TechnicalContact

  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyStore
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

Outputs:
  VPC:
    Description: VPC ID for the ECS service
    Value: !Ref VPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VpcID ] ]
  PublicSubnet1CIDR:
    Description: CIDR block of the public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet1 ] ]
  PublicSubnet2CIDR:
    Description: CIDR block of the public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet2 ] ]
  PrivateSubnet1CIDR:
    Description: CIDR block of the private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet1 ] ]
  PrivateSubnet2CIDR:
    Description: CIDR block of the private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet2 ] ]  
  SecurityGroupName:
    Description: Security group name
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SecurityGroupName ] ]
  ECSClusterName:
    Description: ECS Cluster name
    Value: !Ref MyECSCluster
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ECSClusterName ] ]
  MyServiceDiscovery:
    Description: Service Discovery name
    Value: !Ref MyServiceDiscovery
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ServiceDiscoveryName ] ]
  ALBListener:
    Description: ALB listener
    Value: !Ref ALBListener
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ALBListener ] ]
  ECSExecutionRoleArn:
    Description: ECS execution role
    Value: !GetAtt ECSExecutionRole.Arn
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ECSExecutionRole ] ]