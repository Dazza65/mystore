---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  MyBase:
    Description: Previously supplied stack name for base infrastructure
    Type: String

Resources:
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: mystore-ecs-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ElasticSearchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - "es:*"
                Resource:
                  - "*"
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
  
  CustomerServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      ExecutionRoleArn: !Ref ECSExecutionRole
      Family: !Sub ${AWS::StackName}-customer-service
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ECSExecutionRole
      ContainerDefinitions:
        - Name: log_router
          Essential: true
          Image: !Sub 906394416424.dkr.ecr.${AWS::Region}.amazonaws.com/aws-for-fluent-bit:latest
          FirelensConfiguration:
            Type: fluentbit
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: firelens-container
              awslogs-region: !Ref AWS::Region 
              awslogs-create-group: "true"
              awslogs-stream-prefix: firelens
          MemoryReservation: 50
        - Name: customer-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/customerservice:latest
          PortMappings:
            - ContainerPort: 8080
              Protocol: http
          Essential: true
          LogConfiguration:
              LogDriver: awsfirelens
              Options:
                Name: "es"
                Host: !ImportValue mystore-es:ESDomainEndpoint
                Port: "443"
                Index: "my_index"
                Type: "_doc"
                AWS_Auth: "Off"
                Generate_ID: "On"
                AWS_Region: !Ref AWS::Region 
                AWS_Role_ARN: !Ref ECSExecutionRole
                tls: "On"
                Trace_Output: "On"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:8080/customers/status | grep -q OK
            Interval: 60
            Retries: 3
            StartPeriod: 10
            Timeout: 2

  CustomerServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Discovery Service for the customer service
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: customer-service
      NamespaceId:
          Fn::ImportValue: !Sub "${MyBase}:ServiceDiscoveryName"
  
  MyCustomerService:
    Type: AWS::ECS::Service
    DependsOn: CustomerServiceTaskDefinition
    Properties: 
      Cluster: MyStore
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${MyBase}:SecurityGroupName"
          Subnets:
            - Fn::ImportValue: !Sub "${MyBase}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${MyBase}:PrivateSubnet2"
      SchedulingStrategy: REPLICA
      ServiceName: customer-service
      ServiceRegistries: 
        - RegistryArn: !GetAtt CustomerServiceDiscoveryService.Arn
      TaskDefinition: !Ref CustomerServiceTaskDefinition

  OrderServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CustomerServiceTaskDefinition
    Properties:
      Cpu: 256
      ExecutionRoleArn: !Ref ECSExecutionRole
      Family: !Sub ${AWS::StackName}-order-service
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ECSExecutionRole
      ContainerDefinitions:
        - Name: log_router
          Essential: true
          Image: !Sub 906394416424.dkr.ecr.${AWS::Region}.amazonaws.com/aws-for-fluent-bit:latest
          FirelensConfiguration:
            Type: fluentbit
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: firelens-container
              awslogs-region: !Ref AWS::Region 
              awslogs-create-group: "true"
              awslogs-stream-prefix: firelens
          MemoryReservation: 50
        - Name: order-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/orderservice:latest
          PortMappings:
            - ContainerPort: 8080
              Protocol: http
          Essential: true
          LogConfiguration:
              LogDriver: awsfirelens
              Options:
                Name: "es"
                Host: !ImportValue mystore-es:ESDomainEndpoint
                Port: "443"
                Index: "my_index"
                Type: "_doc"
                AWS_Auth: "Off"
                Generate_ID: "On"
                AWS_Region: !Ref AWS::Region 
                AWS_Role_ARN: !Ref ECSExecutionRole
                tls: "On"
                Trace_Output: "On"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:8080/orders/status | grep -q OK
            Interval: 60
            Retries: 3
            StartPeriod: 10
            Timeout: 2

  OrderServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Discovery Service for the customer service
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: order-service
      NamespaceId:
          Fn::ImportValue: !Sub "${MyBase}:ServiceDiscoveryName"
  
  MyOrderService:
    Type: AWS::ECS::Service
    DependsOn: OrderServiceTaskDefinition
    Properties: 
      Cluster: MyStore
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${MyBase}:SecurityGroupName"
          Subnets:
            - Fn::ImportValue: !Sub "${MyBase}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${MyBase}:PrivateSubnet2"
      SchedulingStrategy: REPLICA
      ServiceName: order-service
      ServiceRegistries: 
        - RegistryArn: !GetAtt OrderServiceDiscoveryService.Arn
      TaskDefinition: !Ref OrderServiceTaskDefinition
  
  CustomerOrderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Sub "${AWS::StackName}-tg"
      TargetType: ip
      Protocol: HTTP
      Port: 8080
      VpcId: 
        Fn::ImportValue: !Sub "${MyBase}:VpcID"
      HealthCheckPath: /customerorders/status

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: 
        Fn::ImportValue: !Sub "${MyBase}:ALBListener"
      Conditions:
      - Field: path-pattern
        PathPatternConfig:
          Values: 
            - /customerorders/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CustomerOrderTargetGroup
      Priority: 1

  CustomerOrderServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CustomerServiceTaskDefinition
    Properties:
      Cpu: 256
      ExecutionRoleArn: !Ref ECSExecutionRole
      Family: !Sub ${AWS::StackName}-customerorder-service
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ECSExecutionRole
      ContainerDefinitions:
        - Name: log_router
          Essential: true
          Image: !Sub 906394416424.dkr.ecr.${AWS::Region}.amazonaws.com/aws-for-fluent-bit:latest
          FirelensConfiguration:
            Type: fluentbit
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: firelens-container
              awslogs-region: !Ref AWS::Region 
              awslogs-create-group: "true"
              awslogs-stream-prefix: firelens
          MemoryReservation: 50
        - Name: customerorder-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/customerorderservice:latest
          PortMappings:
            - ContainerPort: 8080
              Protocol: http
          Essential: true
          Environment:
            - Name: CUSTOMER_SVC
              Value: customer-service.mystore
            - Name: CUSTOMER_SVC_PORT
              Value: 8080
            - Name: ORDER_SVC
              Value: order-service.mystore
            - Name: ORDER_SVC_PORT
              Value: 8080
          LogConfiguration:
              LogDriver: awsfirelens
              Options:
                Name: "es"
                Host: !ImportValue mystore-es:ESDomainEndpoint
                Port: "443"
                Index: "my_index"
                Type: "_doc"
                AWS_Auth: "Off"
                Generate_ID: "On"
                AWS_Region: !Ref AWS::Region 
                AWS_Role_ARN: !Ref ECSExecutionRole
                tls: "On"
                Trace_Output: "On"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:8080/customerorders/status | grep -q OK
            Interval: 60
            Retries: 3
            StartPeriod: 10
            Timeout: 2

  CustomerOrderServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Discovery Service for the public facing customer order service
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: customerorder-service
      NamespaceId:
          Fn::ImportValue: !Sub "${MyBase}:ServiceDiscoveryName"

  MyCustomerOrderService:
    Type: AWS::ECS::Service
    DependsOn: CustomerOrderServiceTaskDefinition
    Properties: 
      Cluster: MyStore
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${MyBase}:SecurityGroupName"
          Subnets:
            - Fn::ImportValue: !Sub "${MyBase}:PublicSubnet1"
            - Fn::ImportValue: !Sub "${MyBase}:PublicSubnet2"
      SchedulingStrategy: REPLICA
      ServiceName: customerorder-service
      TaskDefinition: !Ref CustomerOrderServiceTaskDefinition
      LoadBalancers:
      - TargetGroupArn: !Ref CustomerOrderTargetGroup
        ContainerName: customerorder-service
        ContainerPort: 8080

Outputs:
  ECSExecutionRoleArn:
    Description: ECS execution role
    Value: !GetAtt ECSExecutionRole.Arn
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ECSExecutionRole ] ]